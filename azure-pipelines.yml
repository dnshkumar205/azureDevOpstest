trigger:
  - test
pr: none
pool:
  vmImage: ubuntu-latest
variables:
  - group: fastswitch-router-test
  - group: fastswtich-aws-creds-non-prod
  - group: fastswitch-bitbuckets-credentials

steps:
  - bash: |
      sudo apt-get install aspell -y
      cd $(Agent.BuildDirectory)

      git clone -b integration-sdk https://$(svcUser):$(svcPassword)@bitbucket.org/famulushealth/famulus-common.git
      git clone -b test https://$(svcUser):$(svcPassword)@bitbucket.org/famulushealth/famulus-router.git
    displayName: 'Clone dependencies'

  - task: DownloadSecureFile@1
    displayName: 'mvnsettings'
    inputs:
      secureFile: 'settings.xml'

  - task: Maven@3
    displayName: 'Common Build...'
    inputs:
      mavenPomFile: '$(Agent.BuildDirectory)/famulus-common/pom.xml'
      goals: 'clean install -Denv=test -U -s $(Agent.TempDirectory)/settings.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      jdkArchitectureOption: 'x64'
      mavenAuthenticateFeed: false
      effectivePomSkip: false
    continueOnError: true

  - task: Maven@3
    displayName: 'Router Build...'
    inputs:
      mavenPomFile: '$(Agent.BuildDirectory)/famulus-router/pom.xml'
      goals: 'clean install  -Denv=test -U -s $(Agent.TempDirectory)/settings.xml'
      mavenOptions: '-Xmx3072m'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      jdkArchitectureOption: 'x64'
      mavenAuthenticateFeed: false
      effectivePomSkip: false

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
    inputs:
      SourceFolder: '$(Agent.BuildDirectory)/famulus-router/famulus-router-gateways/'
      Contents: |
        **/target/**
         **/$(docker_file_name)
      TargetFolder: '$(build.artifactstagingdirectory)'
      CleanTargetFolder: false
      OverWrite: true
      flattenFolders: true

  - bash: |
      cd $(build.artifactstagingdirectory)
      zip -r $(Build.BuildNumber).zip *
    displayName: 'Build Zip Artifact'


  - script: |
      aws ecr get-login-password --region $(AWS_REGION_1) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION_1).amazonaws.com
    displayName: 'Login to AWS - ECR'
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

  - task: Docker@2
    displayName: 'Building Docker Image with tags router service'
    inputs:
      repository: '$(ecr_repository_name)'
      command: 'build'
      Dockerfile: '$(Agent.BuildDirectory)/famulus-router/famulus-router-gateways/$(docker_file_name)'
      tags: '$(Build.BuildNumber)'
      addPipelineData: false
      addBaseImageData: false


  - bash: |
      docker images
      docker tag $(ecr_repository_name):$(Build.BuildNumber) $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION_1).amazonaws.com/$(ecr_repository_name):$(Build.BuildNumber)
      docker push $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION_1).amazonaws.com/$(ecr_repository_name):$(Build.BuildNumber)
    displayName: 'Docker Push with tags $(AWS_REGION_1)'



  - script: |
      aws ecr get-login-password --region $(AWS_REGION_1) | docker login --username AWS --password-stdin $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION_1).amazonaws.com
    displayName: 'Login to AWS - ECR'
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

  - bash: |
      docker images
      docker tag $(ecr_repository_name):$(Build.BuildNumber) $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION_1).amazonaws.com/$(ecr_repository_name):$(Build.BuildNumber)
      docker push $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION_1).amazonaws.com/$(ecr_repository_name):$(Build.BuildNumber)
    displayName: 'Docker Push with tags $(AWS_REGION_1)'



  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)/$(Build.BuildNumber).zip'
